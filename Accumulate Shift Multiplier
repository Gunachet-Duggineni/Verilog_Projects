module Shift_Multiplier(
    input clk,
    input rst,
    input start,
    input [3:0] A,
    input [3:0] B,
    output reg [7:0] Product,
    output reg done
    );

    reg [7:0] multiplicand;
    reg [3:0] multiplier;
    reg [7:0] partial_product;
    reg [3:0] count;
    reg processing;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            multiplicand <= 0;
            multiplier <= 0;
            partial_product <= 0;
            count <= 0;
            processing <= 0;
            done <= 0;
            Product <= 0;
        end
        else if (start && !processing) begin
            multiplicand <= {4'b0, A};
            multiplier <= B;
            partial_product <= 0;
            count <= 5;
            processing <= 1;
            done <= 0;
        end
        else if (processing) begin
            if (count > 0) begin
                if (multiplier[0]) begin
                    partial_product <= partial_product + multiplicand;
                end
                multiplicand <= multiplicand << 1;
                multiplier <= multiplier >> 1;
                count <= count - 1;
            end
            else begin
                Product <= partial_product;
                done <= 1;
                processing <= 0;
            end
        end
    end
endmodule
